<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SLAM on Halo</title>
    <link>https://guoguoguo98.github.io/tags/slam/</link>
    <description>Recent content in SLAM on Halo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 21 Apr 2023 12:29:01 +0800</lastBuildDate><atom:link href="https://guoguoguo98.github.io/tags/slam/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>初识SLAM：探索机器人视觉定位与地图构建之技术</title>
      <link>https://guoguoguo98.github.io/posts/%E5%88%9D%E8%AF%86slam/</link>
      <pubDate>Fri, 21 Apr 2023 12:29:01 +0800</pubDate>
      
      <guid>https://guoguoguo98.github.io/posts/%E5%88%9D%E8%AF%86slam/</guid>
      <description>一、SLAM技术简介 随着科技的飞速发展，机器人已成为我们日常生活中的重要组成部分。在这个过程中，SLAM技术发挥着关键作用。SLAM（Simultaneous Localization And Mapping，同时定位与地图构建）是一种使机器人能够在未知环境中估算自身位置并构建环境地图的算法。
二、SLAM的关键组成部分 SLAM主要由两个核心组成部分构成：定位（Localization）和地图构建（Mapping）。
定位（Localization）：定位是估计机器人在环境中的位置。通常采用概率模型来描述这个过程，如卡尔曼滤波（Kalman Filter）和粒子滤波（Particle Filter）等。 地图构建（Mapping）：地图构建是通过观测数据来建立环境地图的过程。地图可以分为两类：特征地图（Feature Map）和栅格地图（Grid Map）。特征地图是将环境中的关键点表示为地图，而栅格地图则将环境划分为多个栅格单元，并表示每个栅格的占用状态。 三、SLAM的主要算法 SLAM算法有很多种类，其中比较知名的有：
EKF-SLAM（Extended Kalman Filter SLAM）：这种方法使用扩展卡尔曼滤波器来估计机器人的位置和地图。它是最早期的SLAM算法之一，但在大规模环境中可能会遇到计算复杂性和鲁棒性问题。 FastSLAM：FastSLAM采用粒子滤波器来解决SLAM问题。相较于EKF-SLAM，它的计算复杂性更低，因此适用于大规模环境。 ORB-SLAM（Oriented FAST and Rotated BRIEF SLAM）：这是一种视觉SLAM算法，通过提取图像中的关键点（特征点）来进行定位和地图构建。它具有很高的精度和实时性，已广泛应用于无人驾驶、增强现实等领域。 四、SLAM的应用领域 SLAM技术广泛应用于各种场景，如：
无人驾驶：SLAM技术可以帮助无人驾驶汽车在复杂的城市环境中进行精确定位和导航，从而提高行驶安全性。 室内导航：在GPS信号受限的室内环境中，SLAM技术可以通过手机摄像头或其他传感器获取环境信息，实现室内定位与导航。 机器人清洁：家用清洁机器人通过SLAM技术构建室内地图并规划清洁路径，有效提高清洁效率。 工业自动化：在工厂等复杂环境中，SLAM技术可以使自动化设备如搬运机器人等实现准确的定位和导航，提高生产效率。 增强现实（AR）：通过SLAM技术，AR设备可以识别现实世界中的物体并在其上叠加虚拟信息，为用户提供沉浸式体验。 航空航天：在探测器探索火星等星球表面时，SLAM技术可以辅助实现精确的导航与地图构建。 五、未来展望 随着深度学习、计算硬件和传感器技术的发展，SLAM技术将进一步提高其精度、鲁棒性和实时性。在未来，SLAM技术不仅将拓展更多应用领域，还将与其他技术（如边缘计算、云计算等）相结合，进一步推动智能机器人、无人驾驶和增强现实等领域的发展。
总结： SLAM技术为机器人在未知环境中的定位与地图构建提供了强大支持。随着科技的不断发展，SLAM技术将在更多领域发挥重要作用，改善人们的生活质量并推动各类产业的升级。</description>
    </item>
    
    <item>
      <title>一步步教你掌握 Gmapping：ROS 里的 SLAM 神器</title>
      <link>https://guoguoguo98.github.io/posts/%E5%88%9D%E8%AF%86gmapping/</link>
      <pubDate>Fri, 21 Apr 2023 09:35:03 +0800</pubDate>
      
      <guid>https://guoguoguo98.github.io/posts/%E5%88%9D%E8%AF%86gmapping/</guid>
      <description>一、Gmapping 简介 Gmapping 是一款基于 ROS 的开源 SLAM 算法，它采用激光雷达数据进行地图创建和机器人定位。Gmapping 使用格子贝叶斯滤波器 (Grid-based FastSLAM) 算法，具有较高的地图精度和实时性。通过使用 Gmapping，可以实现室内外环境的实时建图和定位。
二、环境配置 系统要求：本教程以 Ubuntu 18.04 为例，同时需要安装 ROS Melodic。如果你还没有安装 ROS，请参考 ROS 官方安装教程。
安装依赖包：在安装 Gmapping 之前，需要先安装以下依赖包：
sudo apt-get install ros-melodic-slam-gmapping sudo apt-get install ros-melodic-turtlebot3 sudo apt-get install ros-melodic-turtlebot3-simulations sudo apt-get install ros-melodic-turtlebot3-navigation 创建工作空间：
mkdir -p ~/catkin_ws/src cd ~/catkin_ws/src catkin_init_workspace cd ~/catkin_ws catkin_make 然后将工作空间添加到 ~/.bashrc：
echo &amp;#34;source ~/catkin_ws/devel/setup.bash&amp;#34; &amp;gt;&amp;gt; ~/.bashrc source ~/.bashrc 三、运行 Gmapping 示例 首先，启动 TurtleBot3 模拟器：
export TURTLEBOT3_MODEL=burger roslaunch turtlebot3_gazebo turtlebot3_world.</description>
    </item>
    
    <item>
      <title>Cartographer 入门教程：从安装到实践技巧一站式指南</title>
      <link>https://guoguoguo98.github.io/posts/%E5%88%9D%E8%AF%86cartographer/</link>
      <pubDate>Thu, 20 Apr 2023 23:45:34 +0800</pubDate>
      
      <guid>https://guoguoguo98.github.io/posts/%E5%88%9D%E8%AF%86cartographer/</guid>
      <description>一、安装 1.1 安装依赖项 首先，我们需要安装一些依赖项。在终端中输入以下命令：
sudo apt-get update sudo apt-get install -y python-wstool python-rosdep ninja-build 1.2 安装 Cartographer ROS 接下来，创建一个新的工作空间并获取 Cartographer ROS 代码：
mkdir -p ~/catkin_ws/src cd ~/catkin_ws/src git clone https://github.com/cartographer-project/cartographer_ros.git 1.3 安装所有必要的依赖项 使用 rosdep 安装所有必要的依赖项：
cd ~/catkin_ws rosdep update rosdep install --from-paths src --ignore-src --rosdistro=${ROS_DISTRO} -y 1.4 构建 Cartographer ROS 现在构建 Cartographer ROS：
cd ~/catkin_ws catkin_make_isolated --install --use-ninja 1.5 更新环境变量 最后，将新安装的软件包添加到 ROS_PACKAGE_PATH 环境变量中：
source ~/catkin_ws/install_isolated/setup.bash 二、使用 2.1 下载测试数据 为了快速验证安装是否成功，可以下载官方提供的测试数据：
wget -P ~/Downloads https://storage.</description>
    </item>
    
  </channel>
</rss>
